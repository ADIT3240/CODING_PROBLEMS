#include <bits/stdc++.h>
using namespace std;

string cycleDetection(vector<vector<int>>& edges, int n, int m) {
    unordered_map<int, list<int>> adj;

    // Build adjacency list
    for (int i = 0; i < m; i++) {
        int u = edges[i][0];
        int v = edges[i][1];

        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    vector<bool> visited(n, false);

    // BFS for each component
    for (int i = 0; i < n; i++) {
        if (!visited[i]) {
            unordered_map<int, int> parent;
            queue<int> q;

            visited[i] = true;
            q.push(i);
            parent[i] = -1;

            while (!q.empty()) {
                int top = q.front();
                q.pop();

                for (auto neighbor : adj[top]) {
                    if (!visited[neighbor]) {
                        visited[neighbor] = true;
                        parent[neighbor] = top;
                        q.push(neighbor);
                    } 
                    // If visited and not parent â†’ cycle found
                    else if (neighbor != parent[top]) {
                        return "Yes";
                    }
                }
            }
        }
    }

    return "No";
}

